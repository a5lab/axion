#{{ ansible_managed }}
worker_processes {{ app__unicorn_worker }}
user "{{ app__user }}", "{{ app__group }}"
working_directory "{{ app__current_path }}"
listen "127.0.0.1:{{ app__unicorn_port }}", :tcp_nopush => true
timeout 60
app_pid = "{{ app__shared_path }}/tmp/pids/unicorn.pid"
pid app_pid

stderr_path "{{ app__shared_path }}/log/unicorn.stderr.log"
stdout_path "{{ app__shared_path }}/log/unicorn.stdout.log"

preload_app true
GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true
# this option should be always false, unicorn will work in synchronous mode over network
check_client_connection false
before_fork do |server, worker|
  # disconnect master from database, each worker will have own connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!
  # zero-downtime running app upgrade
  old_pid = "#{app_pid}.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      puts "Old master alerady dead"
    end
  end
end

after_fork do |server, worker|
  # establish database connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
  # write pid of workers to monitor them with monit
  child_pid = server.config[:pid].sub('.pid', ".#{worker.nr}.pid")
  system("echo #{Process.pid} > #{child_pid}")
end
