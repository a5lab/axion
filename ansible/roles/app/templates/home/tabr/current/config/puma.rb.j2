#{{ ansible_managed }}
# Puma can serve each request in a thread from an internal thread pool.
# The `threads` method setting takes two numbers: a minimum and maximum.
# Any libraries that use thread pools should be configured to match
# the maximum value specified for Puma. Default is set to 5 threads for minimum
# and maximum; this matches the default thread size of Active Record.
#
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { {{ app__puma_worker }} }
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
#
# port        ENV.fetch("PORT") { {{ app__puma_port }} }

# Puma without ssl support (disable port )
#
bind "tcp://127.0.0.1:#{ {{ app__puma_port }} }"

# Puma with ssl support (disable port )
#
# ssl_key = ENV.fetch("RAILS_SSL_KEY") { {{ app__shared_path }}/certs/privkey.pem }
# ssl_cert = ENV.fetch("RAILS_SSL_CERT") { {{ app__shared_path }}/certs/cert.pem }
# bind "ssl://127.0.0.1:#{ {{ app__puma_port }} }?key=#{ssl_key}&cert=#{ssl_cert}"

# Specifies the `environment` that Puma will run in.
#
environment ENV.fetch("RAILS_ENV") { "production" }

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE") { "{{ app__shared_path }}/tmp/pids/server.pid" }

# Specifies log files
stdout_redirect "{{ app__shared_path }}/log/puma.stdout.log", "{{ app__shared_path }}/log/puma.stderr.log", true

# Specifies the number of `workers` to boot in clustered mode.
# Workers are forked web server processes. If using threads and workers together
# the concurrency of the application would be max `threads` * `workers`.
# Workers do not work on JRuby or Windows (both of which do not support
# processes).
#
# workers ENV.fetch("WEB_CONCURRENCY") { 2 }

# Activate control app, available by http://127.0.0.1:9000/stats?token=secret
activate_control_app('tcp://127.0.0.1:9000', auth_token: 'secret')

# Use the `preload_app!` method when specifying a `workers` number.
# This directive tells Puma to first boot the application and load code
# before forking the application. This takes advantage of Copy On Write
# process behavior so workers use less memory.
#
# preload_app!

# Allow puma to be restarted by `rails restart` command.
plugin :tmp_restart
